// Provides cross-browser text shadows when one or more shadows are needed.
// Each shadow argument should adhere to the standard css3 syntax for the
// text-shadow property.
//
// Note: if any shadow has a spread parameter, this will cause the mixin
// to emit the shadow declaration twice, first without the spread,
// then with the spread included. This allows you to progressively
// enhance the browsers that do support the spread parameter.
@mixin text-shadow($shadow...) {
  $shadow: if(length($shadow) > 0, $shadow, default);
  $default: -compass-space-list(compact(0px 0px 1px false #aaaaaa));
  $shadows-without-spread: join((),(),comma);
  $shadows: join((),(),comma);
  $has-spread: false;

  @each $layer in $shadow {
    $layer: if($layer == 'default', $default, $layer);
    @if length($layer) > 4 {
      $has-spread: true;
      $shadows-without-spread: append($shadows-without-spread, nth($layer,1) nth($layer,2) nth($layer,3) nth($layer,5));
      $shadows: append($shadows, $layer);
    } @else {
      $shadows-without-spread: append($shadows-without-spread, $layer);
      $shadows: append($shadows, $layer);
    }
  }
  @if $has-spread {
    text-shadow: $shadows-without-spread;
  }
  text-shadow: $shadows;
}

@function longdrop($color_a,$color_b,$stepnum) {

  $gradient_steps: null;

  @for $i from 1 through $stepnum {
    $weight: (($i - 1) / $stepnum) * 100;
    $colour_mix: mix($color_b, $color_a, $weight);
    $seperator: null;

    @if($i != $stepnum) { $seperator: #{','}; }

    $gradient_steps: append(
      #{$gradient_steps},
      -#{$i}px #{$i}px $colour_mix $seperator
    );
  }

  @return $gradient_steps;
}
